---
- name: "Ensure Springboot application base directory sbi_appbase={{ sbi_appbase }} is removed"
  file:
    path: "{{ sbi_appbase }}/"
    state: absent
    follow: no
  become: "{{ sbi_become }}"

- name: "Create {{ sbi_appname }} base directory sbi_appbase={{ sbi_appbase }}"
  file:
    path: "{{ sbi_appbase }}"
    state: directory
    mode: "{{ sbi_appbase_mode }}"
    owner: springboot
    group: springboot
    seuser: system_u
    serole: object_r
  become: "{{ sbi_become }}"

- name: "Create {{ sbi_appname }} log directory sbi_log_dir={{ sbi_log_dir }}"
  file:
    path: "{{ sbi_log_dir }}"
    state: directory
    mode: "{{ sbi_log_dir_mode }}"
    owner: springboot
    group: springboot
    seuser: system_u
    serole: object_r
    setype: springboot_log_t
  become: "{{ sbi_become }}"

- name: "Create {{ sbi_appname }} tmp/cache/work directory sbi_srv_dir={{ sbi_srv_dir }}"
  file:
    path: "{{ sbi_srv_dir }}"
    state: directory
    mode: "{{ sbi_log_dir_mode }}"
    owner: springboot
    group: springboot
    seuser: system_u
    serole: object_r
    setype: springboot_var_t
  become: "{{ sbi_become }}"

- name: "Create {{ sbi_appname }} dynamic libraries directory {{ sbi_srv_dir }}/dynlib"
  file:
    path: "{{ sbi_srv_dir }}/dynlib"
    state: directory
    mode: "{{ sbi_log_dir_mode }}"
    owner: springboot
    group: springboot"
    seuser: system_u
    serole: object_r
    setype: springboot_dynlib_t
  become: "{{ sbi_become }}"

- name: "Create application subdirectories with default/configured ownership & permissions (if each is different than sbi_appbase={{ sbi_appbase }})"
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    seuser: system_u
    serole: object_r
    setype: "{{ item.seltype }}"
  loop: "{{ sbi_folders }}"
  when: item.path != sbi_appbase
  become: "{{ sbi_become }}"

- name: "Create symlink of {{ sbi_log_dir }} to {{ sbi_appbase }}/logs block"
  block:
    - name: "Stat {{ sbi_appbase }}/logs"
      stat:
        path: "{{ sbi_appbase }}/logs"
      register: stat_dest_logs_dir

    - name: "Create logs symlink"
      file:
        src: "{{ sbi_log_dir }}"
        dest: "{{ sbi_appbase }}/logs"
        owner: "{{ sbi_log_dir_user }}"
        group: "{{ sbi_log_dir_group }}"
        state: link
        force: true
      when: not stat_dest_logs_dir.stat.exists

  become: "{{ sbi_become }}"
  when: sbi_log_symlink
